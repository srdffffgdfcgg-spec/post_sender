#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π Gmail –∫–ª–∏–µ–Ω—Ç:
- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ (SMTP)
- –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –ø–∏—Å–µ–º (IMAP)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
–ù–∞—Å—Ç—Ä–æ–π–∫–∏: EMAIL, APP_PASSWORD
"""

import imaplib
import smtplib
import email
import os
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from email.header import decode_header, make_header
from pathlib import Path

# ====== –ù–ê–°–¢–†–û–ô–ö–ò: –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ======
EMAIL = "–º—ñ–π_–µ–º–µ—ñ–ª@gmail.com"         # –¢–≤–æ–π Gmail
APP_PASSWORD = "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–≤–æ—Ö–µ—Ç–∞–ø–Ω–æ—ó–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –±–µ–∑–ø–µ–∫–∏"      # 16-–∑–Ω–∞—á–Ω—ã–π app password (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
# =========================================

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
IMAP_SERVER = "imap.gmail.com"
ATTACH_SAVE_DIR = Path.cwd() / "attachments"
ATTACH_SAVE_DIR.mkdir(exist_ok=True)

# ---------- –û–¢–ü–†–ê–í–ö–ê –ü–ò–°–¨–ú–ê ----------
def send_email(to_address: str, subject: str, body: str, attachments: list[str] = None):
    attachments = attachments or []
    msg = MIMEMultipart()
    msg["From"] = EMAIL
    msg["To"] = to_address
    msg["Subject"] = subject

    msg.attach(MIMEText(body, "plain", "utf-8"))

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
    for file_path in attachments:
        file_path = Path(file_path)
        if not file_path.exists():
            print(f"‚ö†Ô∏è –í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {file_path}")
            continue
        part = MIMEApplication(file_path.read_bytes(), Name=file_path.name)
        part['Content-Disposition'] = f'attachment; filename="{file_path.name}"'
        msg.attach(part)

    context = ssl.create_default_context()
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.ehlo()
        server.starttls(context=context)
        server.ehlo()
        server.login(EMAIL, APP_PASSWORD)
        server.send_message(msg)
    print("‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞", to_address)


# ---------- –ß–¢–ï–ù–ò–ï –í–•–û–î–Ø–©–ò–• (IMAP) ----------
def decode_mime_words(s):
    if not s:
        return ""
    return str(make_header(decode_header(s)))

def save_attachment(part, prefix="attachment"):
    filename = part.get_filename()
    if not filename:
        filename = f"{prefix}"
    filename = decode_mime_words(filename)
    safe_name = "".join(c for c in filename if c.isprintable())
    out_path = ATTACH_SAVE_DIR / safe_name
    counter = 1
    while out_path.exists():
        out_path = ATTACH_SAVE_DIR / f"{out_path.stem}_{counter}{out_path.suffix}"
        counter += 1
    with open(out_path, "wb") as f:
        f.write(part.get_payload(decode=True))
    return out_path

def read_inbox(limit=10, unseen_only=False, mark_as_read=False):
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, APP_PASSWORD)
    mail.select("inbox")

    criterion = 'UNSEEN' if unseen_only else 'ALL'
    typ, data = mail.search(None, criterion)
    if typ != 'OK':
        print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º:", typ)
        return

    mail_ids = data[0].split()
    if not mail_ids:
        print("–í—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit –ø–∏—Å–µ–º
    selected_ids = mail_ids[-limit:]

    for num in reversed(selected_ids):
        typ, msg_data = mail.fetch(num, '(RFC822)')
        if typ != 'OK':
            print("–û—à–∏–±–∫–∞ fetch:", typ)
            continue
        raw = msg_data[0][1]
        msg = email.message_from_bytes(raw)

        from_ = decode_mime_words(msg.get("From"))
        subject = decode_mime_words(msg.get("Subject"))
        date_ = msg.get("Date")

        print(f"\n--- –ü–∏—Å—å–º–æ ID {num.decode()} ---")
        print("–û—Ç:", from_)
        print("–¢–µ–º–∞:", subject)
        print("–î–∞—Ç–∞:", date_)

        # —Ç–µ–ª–æ + –≤–ª–æ–∂–µ–Ω–∏—è
        body_text = ""
        attachments_saved = []
        if msg.is_multipart():
            for part in msg.walk():
                ctype = part.get_content_type()
                disp = str(part.get("Content-Disposition"))
                if part.is_multipart():
                    continue
                if ctype == "text/plain" and "attachment" not in disp:
                    payload = part.get_payload(decode=True)
                    if payload:
                        try:
                            body_text += payload.decode(part.get_content_charset() or "utf-8", errors="replace")
                        except Exception:
                            body_text += payload.decode("utf-8", errors="replace")
                elif "attachment" in disp or part.get_filename():
                    saved = save_attachment(part, prefix=f"attach_{num.decode()}")
                    attachments_saved.append(saved)
        else:
            payload = msg.get_payload(decode=True)
            if payload:
                body_text = payload.decode(msg.get_content_charset() or "utf-8", errors="replace")

        print("–¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 800 —Å–∏–º–≤–æ–ª–æ–≤):")
        print(body_text[:800] + ("..." if len(body_text) > 800 else ""))
        if attachments_saved:
            print("üìé –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–∏—è:")
            for p in attachments_saved:
                print("  -", p)
        else:
            print("–í–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.")

        # –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ?
        if mark_as_read:
            mail.store(num, '+FLAGS', '\\Seen')

    mail.logout()

# ---------- –ü–†–ò–ú–ï–† –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø (CLI) ----------
def main():
    print("Gmail client ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞/—á—Ç–µ–Ω–∏–µ –ø–∏—Å–µ–º")
    print("1 - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ")
    print("2 - –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N)")
    print("3 - –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ")
    print("q - –í—ã—Ö–æ–¥")
    choice = input("–í—ã–±–æ—Ä: ").strip().lower()
    if choice == "1":
        to_addr = input("–ö–æ–º—É (email): ").strip()
        subj = input("–¢–µ–º–∞: ").strip()
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π —Å –æ–¥–Ω–∏–º 'END'):")
        lines = []
        while True:
            ln = input()
            if ln.strip() == "END":
                break
            lines.append(ln)
        body = "\n".join(lines)
        attach_input = input("–§–∞–π–ª—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é), –ø—É—Å—Ç–æ ‚Äî –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π: ").strip()
        attachments = [p.strip() for p in attach_input.split(",")] if attach_input else []
        send_email(to_addr, subj, body, attachments)
    elif choice == "2":
        n = input("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∏—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
        n = int(n) if n.isdigit() and int(n) > 0 else 10
        read_inbox(limit=n, unseen_only=False, mark_as_read=False)
    elif choice == "3":
        n = input("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
        n = int(n) if n.isdigit() and int(n) > 0 else 10
        read_inbox(limit=n, unseen_only=True, mark_as_read=True)
    else:
        print("–í—ã—Ö–æ–¥.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–û—Ç–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
